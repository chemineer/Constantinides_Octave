function df = fder(fnctn, order, x, h, method, varargin)%FDER Evaluates nth-order derivative (n<=4) of a function%     with truncation error of the order h^2.%%     FDER('F',N,X) evaluates Nth order derivative of the%     function described by the M-file F.M at X. X may be a%     scalar or a vector.%%     FDER('F',N,X,H,METHOD,PARAMETER) evaluates Nth order%     derivative of the function using H as increment of X used%     in differentiation.%     METHOD is the finite difference method used%       Use METHOD = -1 for backward finite difference%       Use METHOD =  0 for central finite difference%       Use METHOD =  1 for forward finite difference%     PARAMETER is a scalar or a vector of parameters that are%     passed to the function F.M. Pass an empty matrix for H%     or METHOD to use the default values.%%     See also DERIV% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif nargin == 3 | isempty(h)   method = 0;   h = min(abs(x))/100;   if h == 0      h = 0.001;   end   if h < eps      h = eps;   endendif nargin<5 | isempty(method)   method = 0;endif (order < 1) | (order > 4) | (h <= 0)   error('Invalid input.')   breakendswitch methodcase -1	% Backward finite difference   yi = feval(fnctn , x , varargin{:});   yim1 = feval(fnctn , x-h , varargin{:});   yim2 = feval(fnctn , x-2*h , varargin{:});   switch order   case 1	% 1st order derivative      df = (3*yi-4*yim1+yim2)/(2*h);   case 2	% 2nd order derivative      yim3 = feval(fnctn , x-3*h , varargin{:});      df = (2*yi-5*yim1+4*yim2-yim3)/h^2;   case 3	% 3rd order derivative      yim3 = feval(fnctn , x-3*h , varargin{:});      yim4 = feval(fnctn , x-4*h , varargin{:});      df = (5*yi-18*yim1+24*yim2-14*yim3+3*yim4);   case 4	% 4th order derivative      yim3 = feval(fnctn , x-3*h , varargin{:});      yim4 = feval(fnctn , x-4*h , varargin{:});      yim5 = feval(fnctn , x-5*h , varargin{:});      df = (3*yi-14*yim1+26*yim2-24*yim3+11*yim4-2*yim5)/h^4;   endcase 0	% Central finite difference   yim1 = feval(fnctn , x-h , varargin{:});   yip1 = feval(fnctn , x+h , varargin{:});   switch order   case 1	% 1st order derivative      df = (yip1-yim1)/(2*h);   case 2	% 2nd order derivative      yi = feval(fnctn , x , varargin{:});      df = (yip1-2*yi+yim1)/h^2;   case 3	% 3rd order derivative      yim2 = feval(fnctn , x-2*h , varargin{:});      yip2 = feval(fnctn , x+2*h , varargin{:});      df = (yip2-2*yip1+2*yim1-yim2)/(2*h^3);   case 4	% 4th order derivative      yim3 = feval(fnctn , x-3*h , varargin{:});      yim2 = feval(fnctn , x-2*h , varargin{:});      yi = feval(fnctn , x , varargin{:});      yip2 = feval(fnctn , x+2*h , varargin{:});      yip3 = feval(fnctn , x+3*h , varargin{:});      df = (-yip3+12*yip2-39*yip1+56*yi-39*yim1+12*yim2-yim3)/(6*h^4);   endcase 1	% Forward finite difference   yi = feval(fnctn , x , varargin{:});   yip1 = feval(fnctn , x+h , varargin{:});   yip2 = feval(fnctn , x+2*h , varargin{:});   switch order   case 1	% 1st order derivative      df = (-yip2+4*yip1-3*yi)/(2*h);   case 2	% 2nd order derivative      yip3 = feval(fnctn , x+3*h , varargin{:});      df = (-yip3+4*yip2-5*yip1+2*yi)/h^2;   case 3	% 3rd order derivative      yip3 = feval(fnctn , x+3*h , varargin{:});      yip4 = feval(fnctn , x+4*h , varargin{:});      df = (-3*yip4+14*yip3-24*yip2+18*yip1-5*yi)/(2*h^3);   case 4	% 4th order derivative      yip3 = feval(fnctn , x+3*h , varargin{:});      yip4 = feval(fnctn , x+4*h , varargin{:});      yip5 = feval(fnctn , x+5*h , varargin{:});      df = (-2*yip5+11*yip4-24*yip3+26*yip2-14*yip1+3*yi)/h^4;   endend