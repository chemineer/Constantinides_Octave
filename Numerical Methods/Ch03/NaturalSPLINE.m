function yi = NaturalSPLINE(x,y,xi)%NATURALSPLINE One dimensional interpolation.%%   YI = NATURALSPLINE(X,Y,XI) applies the natural spline%   interpolation to find YI, the values of the underlying%   function Y at the points in the vector XI.  The vector%   X specifies the points at which the data Y is given.%%   See also Lagrange, GregoryNewton, INTERP1, INTERPQ, SPLINE% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif nargin < 3   error('Invalid number of inputs.')endx = (x(:).')';    % Make sure it's a column vectory = (y(:).')';    % Make sure it's a column vectorxi = (xi(:).')';  % Make sure it's a column vectornx = length(x);ny = length(y);if nx ~= ny   error('X and Y vectors are not the same size.');endlxi = length(xi);% Locating the required number of base pointsfor m = 1:lxi   d = xi(m) - x;   % Locating xi   [dm , loc(m)] = min(abs(d));   % locating the first base point   if d(loc(m)) < 0 | loc(m) == nx      loc(m) = loc(m) - 1;   end   if loc(m) < 1      loc(m) = 1;   endenddx = diff(x);dy = diff(y);yox = dy ./ dx;% Matrix of coefficientsA = 2 * diag(x(3:nx)-x(1:nx-2)) + ...   [zeros(nx-2,1) [diag(dx(2:nx-2)) ; zeros(1,nx-3)]] + ...   [zeros(1,nx-2) ; [diag(dx(2:nx-2)) zeros(nx-3,1)]];% Vector of constantsc = 6 * (yox(2:nx-1) - yox(1:nx-2));% Solution of the set of linear equationsy2 = [0; inv(A) * c; 0];% Interpolationyi = (1/6) * ((xi - x(loc+1)).^3 ./ (x(loc) - x(loc+1)) ...   - (x(loc) - x(loc+1)) .* (xi - x(loc+1))) .* y2(loc) ...   + (1/6) * ((xi - x(loc)).^3 ./ (x(loc+1) - x(loc)) ...   - (x(loc+1) - x(loc)) .* (xi - x(loc))) .* y2(loc+1) ...   + (xi - x(loc+1)) ./ (x(loc) - x(loc+1)) .* y(loc) ...   + (xi - x(loc)) ./ (x(loc+1) - x(loc)) .* y(loc+1);