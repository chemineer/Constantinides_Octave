function yi = Lagrange(x,y,xi,n)%Lagrange One dimensional interpolation.%%   YI = Lagrange(X,Y,XI,N) applies the Nth-order Lagrange%   interpolation to find YI, the values of the underlying%   function Y at the points in the vector XI.  The vector%   X specifies the points at which the data Y is given.%%   YI = Lagrange(X,Y,XI) is equivalent to the linear%   interpolation.%%   See also NATURALSPLINE, GregoryNewton, SPLINE, INTERP1, INTERP1Q% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif nargin < 3   error('Invalid number of inputs.')endx = (x(:).')';    % Make sure it's a column vectory = (y(:).')';    % Make sure it's a column vectornx = length(x);ny = length(y);if nx ~= ny   error('X and Y vectors are not the same size.');end% Check the order of interpolationif nargin == 3 | n < 1   n = 1;endn = floor(n);if n >= nx   fprintf('\nNot enough data points for %2d-oredr interpolation.',n)   fprintf('\n%2d-order interpolation will be performed instead.\n',nx-1)   n = nx - 1;endlxi = length(xi);deltax(1,:) = ones(1,lxi);% Locating the required number of base pointsfor m = 1:lxi   dx = xi(m) - x;   % Locating xi   [dxm , loc] = min(abs(dx));   % locating the first base point   if dx(loc) < 0      loc = loc - 1;   end   if loc < 1      loc = 1;   end   if loc+n > nx      loc = nx - n;   end   deltax(2:n+2,m) = dx(loc:loc+n);   xtemp(1:n+1,m) = x(loc:loc+n);   ytemp(1:n+1,m) = y(loc:loc+n);end% Interpolationfor k = 1 : n+1   for m = 1 : n+1      if k ~= m         den(m,:) = xtemp(k,:) - xtemp(m,:);      else         den(m,:) = ones(1,lxi);      end   end   p(k,:) = prod([deltax(1:k,:) ; deltax(k+2:n+2,:)]) ./ prod(den);   s(k,:) = p(k,:) .* ytemp(k,:);endyi = sum(s);