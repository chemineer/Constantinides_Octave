function [stdb, CL] = statistics(b, n, x, y, yc, w, JTJ, a, OUTfile)%STATISTICS Statistical properties of fitting parameters.%% [STDB,CL]=STATISTICS(B,N,Y,YC,W,JTJ,A,'F') performs statistical% analysis on fitting parameters where% STDB = vector of standard deviation of parameters% CL = matrix of confidence limits fo variable whose first% column is the lower confidence limit and second column% is the upper confidence limit of parameters.% B = vector of fitting parameters.% N = vector of number of experimental points of each % dependent variable.% X is the vector/matrix of independent variables correponding to% the elements of Y.% Y can be either a column vector (single regression) or a matrix% (multiple regresion) whose columns are the observed dependent% variables. Each column represents a different dependent variable.% YC = matrix of calculated dependent variables.% W = vector of weighting factors.% JTJ = sum{wj*jacobian'*jacobian}% A = percentage of confidence interval. Default value is 95%.% F = name of output file. If this argument is not introduced, the% function writes the output to 'NLRstatistics'.% (c) N. Mostoufi & A. Constantinides% January 1, 1999if nargin < 8 | isempty(a)   a = 95;endif nargin < 9   OUTfile = 'NLRstatistics';endk = length(b);            % Number of parametersb = (b(:).')';            % Make sure it's a column vectorv = length(n);            % Number of dependent variablese = y - yc;               % Residualsss = zeros(1,v);ns = zeros(1,v);n1 = zeros(1,v);n2 = zeros(1,v);nruns = zeros(1,v);ncount = zeros(1,v);lackfitss = zeros(1,v);% Apportioning number of parameters for calc. degrees of freedomlackfitns = -k/v * ones(1,v);% Calculating the statistics of the experimental datadisp(' ')   disp(' **********************************************************')disp('        Statistical analysis of the experimental data')disp(' **********************************************************')disp(' ')disp(' Unweighted statistics')fprintf(OUTfile, ...   '\n **********************************************************')fprintf(OUTfile, ...   '\n        Statistical analysis of the experimental data')fprintf(OUTfile, ...   '\n **********************************************************')fprintf(OUTfile,'\n Unweighted statistics\n')for nv = 1:v   fprintf('\n Variable No.                  %3d \n', nv)   fprintf(OUTfile,'\n Variable No.                  %3d \n', nv)   % Sorting data and calculated values   [xx(1:n(nv),nv),loc] = sort(x(1:n(nv),nv));   yy(1:n(nv),nv) = y(loc,nv);   yyc(1:n(nv),nv) = yc(loc,nv);   tmpy = yy(1,nv);   % Searching for repeated data   for nn = 2:n(nv)      if xx(nn-1,nv) == xx(nn,nv)         tmpy = [tmpy; yy(nn,nv)];      else         ly = length(tmpy);         if ly ~= 1             ss(nv) = ss(nv) + (ly-1)*std(tmpy)^2;            ns(nv) = ns(nv) + (ly-1);         end         ncount(nv) = ncount(nv) + 1;         resid(ncount(nv),nv) = mean(tmpy)-yyc(nn-1,nv);         lackfitss(nv) = lackfitss(nv)+ ly*(mean(tmpy)-yyc(nn-1,nv))^2;         lackfitns(nv) = lackfitns(nv)+ 1;         % Counting positive and negative residuals         if resid(ncount(nv),nv) == 0            resid(ncount(nv),nv) = 1;         end         if resid(ncount(nv),nv) > 0.0            n1(nv) = n1(nv) + 1;         else            n2(nv) = n2(nv) + 1;         end         end      ly = length(tmpy);      if nn == n(nv) & ly ~= 1           ss(nv) = ss(nv) + (ly-1)*std(tmpy)^2;         ns(nv) = ns(nv) + (ly-1);         ncount(nv) = ncount(nv) + 1;         resid(ncount(nv),nv) = mean(tmpy)-yyc(nn-1,nv);         lackfitss(nv) = lackfitss(nv)+ ly*(mean(tmpy)-yyc(nn-1,nv))^2;         lackfitns(nv) = lackfitns(nv)+ 1;         % Counting positive and negative residuals         if resid(ncount(nv),nv) == 0            resid(ncount(nv),nv) = 1;         end          if resid(ncount(nv),nv) > 0.0            n1(nv) = n1(nv) + 1;         else            n2(nv) = n2(nv) + 1;         end         end      if xx(nn-1,nv) ~= xx(nn,nv)         tmpy = yy(nn,nv);      end      end    fprintf(' Total points                  %3d \n',n(nv))   fprintf(' Degrees of freedom            %3d \n',ns(nv))   fprintf(' Sum of squares         %10.4g\n',ss(nv))   fprintf(OUTfile,' Total points                  %3d \n',n(nv))   fprintf(OUTfile,' Degrees of freedom            %3d \n',ns(nv))   fprintf(OUTfile,' Sum of squares         %10.4g\n',ss(nv))   % Estimating variance of the data for each variable   if ns == 0      s2(nv) = 1;   else      s2(nv) = ss(nv) / ns(nv);   end   fprintf(' Variance               %10.4g\n',s2(nv))   fprintf(' Standard deviation     %10.4g\n',sqrt(s2(nv)))      fprintf(OUTfile,' Variance               %10.4g\n',s2(nv))   fprintf(OUTfile,' Standard deviation     %10.4g\n',sqrt(s2(nv)))end% Estimating the weighted statistics of the datatotalpoints = sum(n);totaldf = sum(ns);weightedss = sum(w.*ss);weighteds2 = weightedss/totaldf;disp(' '),disp(' Weighted statistics'),disp(' ')fprintf(' Total points                  %3d \n',totalpoints)fprintf(' Total degrees of freedom      %3d \n',totaldf)fprintf(' Weighted sum of squares%10.4g\n',weightedss)fprintf(' Weighted variance      %10.4g\n',weighteds2)fprintf(' Weighted stand. dev.   %10.4g\n',sqrt(weighteds2))fprintf(OUTfile,'\n Weighted statistics\n')fprintf(OUTfile,' Total points                  %3d \n',totalpoints)fprintf(OUTfile,' Total degrees of freedom      %3d \n',totaldf)fprintf(OUTfile,' Weighted sum of squares%10.4g\n',weightedss)fprintf(OUTfile,' Weighted variance      %10.4g\n',weighteds2)fprintf(OUTfile,' Weighted stand. dev.   %10.4g\n',sqrt(weighteds2))% Sum of squares due to lack of fitlackfitphi = sum(w.*lackfitss);  % Weighted sum of squared residuals lackfitdf = sum(lackfitns);lackfits2 = lackfitphi/lackfitdf;% Sum of squared residuals of each dependent variablefor m = 1:v   ssr(m) = e(1:n(m),m)'*e(1:n(m),m);enddfvar = n - k/v;          % Degrees of freedom for each variables2var = ssr./dfvar;       % Variance for each fitted variablephi = sum(w.*ssr);        % Weighted sum of squared residuals df = sum(n) - k;          % Degrees of freedom for all variabless2 = phi / df;            % Weighted variance for all variablesVarCovar = s2*inv(JTJ);   % Variance - covariance matrixfor m = 1:k               % Correlation coefficient matrix  for mm = 1:k     CorCoeff(m,mm)=VarCovar(m,mm)/sqrt(VarCovar(m,m)*VarCovar(mm,mm));  endendstdb = sqrt(s2 * diag(inv(JTJ)));% Standard deviation of parameterstb = b./stdb;             % t-calculated for parameters% Calculating confidence intervalalpha = 1 - a/100;infinity = 30;t0 = 1;t = 2;while abs(t - t0) > 1e-6   t0 = t;   % Newton-Raphson method for finding t_(1-alpha)   t = t + (quad('stud',t,infinity,[],[],df) - alpha/2) / stud(t,df);end% Vector of confidence limits of parametersCL = [b-t*stdb , b+t*stdb];for m = 1:v   t0 = 1;   t = 2;   while abs(t - t0) > 1e-6      t0 = t;      % Newton-Raphson method for finding t_(1-alpha)      t = t + (quad('stud',t,infinity,[],[],dfvar(m)) - alpha/2) /...         stud(t,dfvar(m));   end   % Vector of confidence limits of variables   CLvar(m) = t*sqrt(s2var(m));end% Writinging resultsdisp(' ')disp(' **********************************************************')disp('           Statistical analysis of the regression')disp(' **********************************************************')disp(' ')disp('  No.   Parameter    Standard      95% Confidence interval')disp('                     deviation     for the parameters')disp('                                   lower value  upper value')fprintf(OUTfile, ...   '\n\n **********************************************************')fprintf(OUTfile, ...   '\n           Statistical analysis of the regression')fprintf(OUTfile, ...   '\n **********************************************************')fprintf(OUTfile, ...   '\n\n  No.   Parameter    Standard      95%% Confidence interval')fprintf(OUTfile, ...   '\n                     deviation     for the parameters')fprintf(OUTfile, ...   '\n                                   lower value  upper value\n')for m = 1:k  fprintf('  %2d    %10.4e  %10.4e   %10.4e  %10.4e\n',...     m,b(m),stdb(m),CL(m,:))       fprintf(OUTfile,'  %2d    %10.4e  %10.4e   %10.4e  %10.4e\n', ...      m,b(m),stdb(m),CL(m,:))endfprintf('\n Degrees of freedom = %2d\n', df)fprintf('\n Total (weighted) sum of squared residuals = %10.4g\n', phi)fprintf('\n Combined (weighted) residual variance (s^2) = %10.4g\n',s2)fprintf('\n Significance tests\n\n')disp('  No.   Parameter    t-calculated   Is parameter significantly')disp('                                       different from zero?')fprintf(OUTfile,'\n Degrees of freedom = %2d\n', df)fprintf(OUTfile, ...   '\n Total (weighted) sum of squared residuals = %10.4g\n', phi)fprintf(OUTfile, ...   '\n Combined (weighted) residual variance (s^2) = %10.4g\n',s2)fprintf(OUTfile,'\n Significance tests\n\n')fprintf(OUTfile, ...   '\n  No.   Parameter    t-calculated   Is parameter significantly')fprintf(OUTfile, ...   '\n                                       different than zero?\n')for m = 1:k   fprintf('  %2d    %10.4e  %10.4e   ',m,b(m),tb(m)  )   fprintf(OUTfile,'  %2d    %10.4e  %10.4e   ',m,b(m),tb(m)  )   if abs(tb(m)) >= t      fprintf('          Yes\n')      fprintf(OUTfile,'          Yes\n')   else      fprintf('          No\n')      fprintf(OUTfile,'          No\n')   endenddisp(' '),disp(' Confidence limits of regressed variables')disp(' ')disp('  Measured   Degrees of   Residual     95% Confidence limit')disp('  variable   freedom      variance     for each measured variable')fprintf(OUTfile,'\n\n Confidence limits of regressed variables')fprintf(OUTfile, ...   '\n\n  Measured   Degrees of   Residual     95%% Confidence limit')fprintf(OUTfile, ...   '\n  variable   freedom      variance     for each measured variable\n')for m=1:v   fprintf('    %2d          %2d        %10.4e       %10.4e\n',m,dfvar(m),...     s2var(m),CLvar(m))   fprintf(OUTfile,'    %2d          %2d        %10.4e       %10.4e\n', ...      m,dfvar(m),s2var(m),CLvar(m))enddisp(' ')disp(' Covariance analysis')disp(' ')disp(' Variance-covariance matrix: s^2*Inverse(J transpose J)') fprintf(OUTfile,'\n\n Covariance analysis')fprintf(OUTfile, ...   '\n\n Variance-covariance matrix: s^2*Inverse(J transpose J)')for m = 1:k   fprintf('\n ')   fprintf(OUTfile,'\n ')   for mm = 1:k      fprintf(' %10.4e ', VarCovar(m,mm))      fprintf(OUTfile,' %10.4e ', VarCovar(m,mm))   endenddisp(' '), disp(' ')disp(' Matrix of correlation coefficients')fprintf(OUTfile,'\n\n\n Matrix of correlation coefficients')for m = 1:k   fprintf('\n ')   fprintf(OUTfile,'\n ')   for mm = 1:k      fprintf(' %10.4g ', CorCoeff(m,mm))      fprintf(OUTfile,' %10.4g ', CorCoeff(m,mm))   endenddisp(' '), disp(' ')disp(' Analysis of variance')disp(' ')disp('  Source of           Sum of squares    Degrees of     Variance')disp('  variance                              freedom')disp(' ')fprintf('  Lack of fit         %10.4e          %2d          %10.4e\n',...     lackfitphi, lackfitdf, lackfits2 )disp(' ')fprintf('  Experimental error  %10.4e          %2d          %10.4e\n',...     weightedss, totaldf, weighteds2)disp(' ')fprintf('  Total               %10.4e          %2d          %10.4e\n',...     phi, df, s2 )fprintf(OUTfile,'\n\n\n Analysis of variance')fprintf(OUTfile, ...   '\n\n  Source of           Sum of squares    Degrees of     Variance')fprintf(OUTfile,'\n  variance                              freedom')fprintf(OUTfile, ...   '\n  Lack of fit         %10.4e          %2d          %10.4e\n',...   lackfitphi, lackfitdf, lackfits2 )fprintf(OUTfile, ...   '\n  Experimental error  %10.4e          %2d          %10.4e\n',...   weightedss, totaldf, weighteds2)fprintf(OUTfile, ...   '\n  Total               %10.4e          %2d          %10.4e\n',...   phi, df, s2 )% Performs the randomness testdisp(' ')disp(' Randomness test')fprintf(OUTfile,'\n\n Randomness test')for nv = 1:v   % Counts number of runs   for nn = 1:ncount(nv)-1      if resid(nn,nv)/resid(nn+1,nv) < 0         nruns(nv)= nruns(nv) + 1;      end   end   B = 2*n1(nv)*n2(nv);   C = n1(nv) + n2(nv);   rmean (nv) = B/C + 1;   sigma = sqrt(B*(B-C)/(C^2*(C-1)));   Z = (nruns(nv)-rmean(nv))/sigma;   disp(' ')   fprintf('  Variable                           %3d\n', nv)   fprintf('  Number of positive residuals       %3d\n', n1(nv))   fprintf('  Number of negative residuals       %3d\n', n2(nv))   fprintf('  Number of runs (changes of sign)   %3d\n', nruns(nv))   fprintf('  Z =                              %10.4g\n', Z)   disp(' ')   fprintf(OUTfile,'\n\n  Variable                           %3d\n', nv)   fprintf(OUTfile,'  Number of positive residuals       %3d\n', n1(nv))   fprintf(OUTfile,'  Number of negative residuals       %3d\n', n2(nv))   fprintf(OUTfile,'  Number of runs (changes of sign)   %3d\n', nruns(nv))   fprintf(OUTfile,'  Z =                             %10.4g\n', Z)   if abs(Z) > 1.96      disp('  Not random at 95% level of confidence')       fprintf(OUTfile,'\n  Not random at 95%% level of confidence')   else      disp('  Random at 95% level of confidence')         fprintf(OUTfile,'\n  Random at 95%% level of confidence')   endenddisp(' ')disp(' **********************************************************')disp('                End of statistical analysis ')disp(' **********************************************************')fprintf(OUTfile, ...   '\n\n **********************************************************')fprintf(OUTfile, ...   '\n                End of statistical analysis ')fprintf(OUTfile, ...   '\n **********************************************************')disp(' ')disp(' **********************************************************')disp(' The results of the statistical analysis have been stored  ')disp(' in the output file you specified.  This file is located   ')disp(' in the default directory you have operated from.  You may ')disp(' open and view this file using any editor.                 ')disp(' **********************************************************')disp(' ')