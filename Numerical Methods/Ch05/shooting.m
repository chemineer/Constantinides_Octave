function [x,y] = shooting(ODEfile,x0,xf,h,y0,yf,gamma0,order,rho,tol,varargin)%SHOOTING Solves a boundary value set of ordinary differential %   equations by shooting method using Newton's technique.%%   [X,Y]=SHOOTING('F',X0,XF,H,Y0,YF,GAMMA) integrates the set of%   ordinary differential equations from X0 to XF, using the%   4th-order Runge-Kutta method.  The equations are described in%   the M-file F.M.  H is the step size. Y0, YF, and GAMMA are the %   vectors of initial conditions, final conditions, and starting%   guesses, respectively. The function returns the independent%   variable in the vector X and the set of dependent variables in%   the matrix Y.%	%   [X,Y]=SHOOTING('F',X0,XF,H,Y0,YF,GAMMA,ORDER,RHO,TOL,P1,P2,...)%   applies the ORDERth-order Runge-Kutta method for forward%   integration, and uses relaxation factor RHO and tolerance TOL%   for convergence test.  Additional parameters P1, P2, ... are%   passed directly to the function F.  Pass an empty matrix for%   ORDER, RHO, or TOL to use the default value.%%   See also COLLOCATION, RK% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif isempty(h) | h == 0   h = (xf - xi)/99;endif nargin < 7 | isempty(order)   order = 4;endif nargin < 8 | isempty(rho)   rho = 1;endif nargin < 9 | isempty(tol)   tol = 1e-6;endy0 = (y0(:).')';			% Make sure it's a column vectoryf = (yf(:).')';			% Make sure it's a column vectorgamma0 = (gamma0(:).')';% Make sure it's a column vector% Checking the number of guessesif length(yf) ~= length(gamma0)   error(' The number of guessed conditions is not equal to the number of final conditions.')endr = length(y0);			% Number of initial conditionsn = r + length(yf);		% Number of boundary conditions% Checking the number of equationsftest = feval(ODEfile,x0,[y0 ; gamma0],varargin{:});if length(ftest) ~= n   error(' The number of equations is not equal to the number of boundary conditions.')endgamma1 = gamma0 * 1.1;gammanew = gamma0;iter = 0;maxiter = 100;% Newton's techniquewhile max(abs(gamma1 - gammanew)) > tol & iter < maxiter   iter = iter + 1;   gamma1 = gammanew;   [x,y] = RK(ODEfile,x0,xf,h,[y0 ; gamma1],order,varargin{:});   fnk = y(r+1:n,end);      % Set d(gamma) for derivation   for k = 1:length(gamma1)      if gamma1(k) ~= 0         dgamma(k) = gamma1(k) / 100;      else         dgamma(k) = 0.01;      end   end      % Calculation of the Jacobian matrix   a = gamma1;   for k = 1:n-r      a(k) = gamma1(k) + dgamma(k);      [xa,ya] = RK(ODEfile,x0,xf,h,[y0 ; a],order,varargin{:});      fnka = ya(r+1:n,end);      jacob(:,k) = (fnka - fnk) / dgamma(k);      a(k) = gamma1(k) - dgamma(k);   end      % Next approximation of the roots   if det(jacob) == 0      gammanew = gamma1 + max([abs(dgamma), 1.1*tol]);   else      gammanew = gamma1 - rho * inv(jacob) * (fnk - yf);   endendif iter >= maxiter   disp('Warning : Maximum iterations reached.')end