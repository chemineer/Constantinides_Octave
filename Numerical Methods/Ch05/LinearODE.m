function y = LinearODE(A,y0,t,t0,method)% LINEARODE Solves a set of linear ordinary differential equations.%%   Y=LINEARODE(A,Y0,T) solves a set of linear ordinary%   differential equations whose matrix of coefficients%   is A and its initial conditions are Y0. The function%   returns the values of the solution Y at times T.%%   Y=LINEARODE(A,Y0,T,T0,METHOD) takes T0 as the time in%   which the initial conditions Y0 are given. Default value%   for T0 is zero. METHOD is the method of solution.%      Use METHOD = 1 for matrix exponential method%      Use METHOD = 2 for eigenvector method%   Default value for METHOD is 1.%%  See also ODE23, ODE45, ODE113, ODE15S, ODE23S, EULER, MEULER,%           RK, ADAMS, ADAMSMOULTON% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Checking inputsif nargin<3 | isempty(t)   error('Vector of independent variable is empty.')endif nargin<4 | isempty(t0)   t0 = 0;endt = t - t0;nt = length(t);if nargin<5 | isempty(method) | method < 1 | method > 2   method = 1;endnA = length(A);if nA ~= length(y0)   error('Matrix of coefficients and vector of initial values are not of the same order.');endy0 = (y0(:).')';		% Make sure it's a column vectorswitch methodcase 1	% Matrix exponential method   for k = 1:nt      if t(k) > 0         y(:,k) = expm(A*t(k))*y0;      else         y(:,k) = y0;      end   endcase 2	% Eigenvector method   [X,D] = eig(A);	% Eigenvectors and eigenvalues   IX = inv(X);   e_lambda_t = zeros(nA,nA,nt);   % Building the matrix exp(LAMBDA.t)   for k = 1:nA      e_lambda_t(k,k,:) = exp(D(k,k) * t);   end   % Solving the set of equations   for k = 1:nt      if t(k) > 0         y(:,k) = X * e_lambda_t(:,:,k) * IX * y0;      else         y(:,k) = y0;      end   endend