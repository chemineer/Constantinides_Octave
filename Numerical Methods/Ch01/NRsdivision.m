function x = NRsdivision(c,tol)%NRSDIVISION Finds polynomial roots.%%   The function NRSDIVISION(C) evaluates the roots of a%   polynomial equation whose coefficients are given in the%   vector C.%%   NRSDIVISION(C,TOL) uses tolerance TOL for convergence%   test. Using the second argument is optional.%%   The polynomial may have no more than a pair of complex%   roots. A root of nth-degree polynomial is determined by%   Newton-Raphson method. This root is then extracted from%   the polynomial by synthetic division. This procedure %   continues until the polynomial reduces to a quadratic.%%   See also ROOTS, NRpoly, NR% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif nargin < 2 | isempty(tol)   tol = 1e-6;endif tol == 0   tol = 1e-6;endn = length(c) - 1;	            % Degree of the polynomiala = c;% Main loopfor k = n : -1 : 3   x0 = -a(2)/a(1);   x1=x0+.1;   iter = 0;   maxiter = 100;      % Solving the polynomial by Newton-Raphson method   while abs(x0 - x1) > tol & iter < maxiter      iter = iter + 1;      x0 = x1;      fnk = polyval(a,x0);		         % Function      fnkp = polyval(polyder(a),x0);   % Derivative      if fnkp ~= 0         x1 = x0 - fnk / fnkp;	      % Next approximation      else         x1 = x0 + .01;      end   end      x(n-k+1) = x1;	% the root      % Calculation of new coefficients    b(1) = a(1);   for r = 2 : k      b(r) = a(r) + b(r-1) * x1;   end      if iter == maxiter      disp('Warning : Maximum iteration reached.')   end      clear a   a = b;   clear bend% Roots of the remaining quadratic polynomialdelta = a(2) ^ 2 - 4 * a(1) * a(3);x(n-1) = (-a(2) - sqrt(delta)) / (2 * a(1));x(n) = (-a(2) + sqrt(delta)) / (2 * a(1));x=x';