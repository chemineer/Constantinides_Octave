function x = NRpoly(c,x0,tol,trace)%NRPOLY Finds a root of polynomial by the Newton-Raphson method.%%   NRPOLY(C,X0) computes a root of the polynomial whose  %   coefficients are the elements of the vector C. %   If C has N+1 components, the polynomial is %   C(1)*X^N + ... + C(N)*X + C(N+1). %   X0 is a starting point.% %   NRPOLY(C,X0,TOL,TRACE) uses tolerance TOL for convergence%   test. TRACE=1 shows the calculation steps numerically and%   TRACE=2 shows the calculation steps both numerically and%   graphically.%%   See also ROOTS, NRsdivision, NR% (c) N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif nargin < 3 | isempty(tol)   tol = 1e-6;endif nargin < 4 | isempty(trace)   trace = 0;endif tol == 0   tol = 1e-6;endif (length(x0) > 1) | (~isfinite(x0))   error('Second argument must be a finite scalar.')enditer = 0;fnk = polyval(c,x0);	% Functionif trace   header = ' Iteration         x           f(x)';  disp(header)  disp([sprintf('%5.0f   %13.6g %13.6g ',iter, [x0 fnk])])  if trace == 2     xpath = [x0 x0];     ypath = [0 fnk];  endendx = x0;x0 = x + .1;maxiter = 100;% Solving the polynomial by Newton-Raphson methodwhile abs(x0 - x) > tol & iter < maxiter   iter = iter + 1;   x0 = x;   fnkp = polyval(polyder(c),x0);	% Derivative   if fnkp ~= 0      x = x0 - fnk / fnkp;	% Next approximation   else      x = x0 + .01;   end      fnk = polyval(c,x);	% Function   % Show the results of calculation   if trace      disp([sprintf('%5.0f   %13.6g %13.6g ',iter, [x fnk])])      if trace == 2         xpath = [xpath x x];         ypath = [ypath 0 fnk];      end   endendif trace == 2   % Plot the function and path to the root   xmin = min(xpath);   xmax = max(xpath);   dx = xmax - xmin;   xi = xmin - dx/10;   xf = xmax + dx/10;   yc = [];   for xc = xi : (xf - xi)/99 : xf      yc=[yc polyval(c,xc)];   end   xc = linspace(xi,xf,100);   ax = linspace(0,0,100);   plot(xc,yc,xpath,ypath,xc,ax,xpath(1),ypath(2),'*',x,fnk,'o')   axis([xi xf min(yc) max(yc)])   xlabel('x')   ylabel('f(x)')   title('Newton-Raphson : The function and path to the root (* : initial guess ; o : root)')endif iter == maxiter   disp('Warning : Maximum iterations reached.')end