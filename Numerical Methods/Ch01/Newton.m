function [xnew , iter] = Newton(fnctn , x0 , rho , tol , varargin)%NEWTON	Solves a set of equations by Newton's method.%%   NEWTON('F',X0) finds a zero of the set of equations%   described by the M-file F.M. X0 is a vector of starting%   guesses.%	%   NEWTON('F',X0,RHO,TOL) uses relaxation factor RHO and%   tolerance TOL for convergence test.%%   NEWTON('F',X0,RHO,TOL,P1,P2,...) allows for additional%   arguments which are passed to the function F(X,P1,P2,...).%   Pass an empty matrix for TOL or TRACE to use the default%   value.% (c) by N. Mostoufi & A. Constantinides% January 1, 1999% Initializationif nargin < 4 | isempty(tol)   tol = 1e-6;endif nargin < 3 | isempty(rho)   rho = 1;endx0 = (x0(:).')';	% Make sure it's a column vectornx = length(x0);x = x0 * 1.1;xnew = x0;iter = 0;maxiter = 100;% Main iteration loopwhile max(abs(x - xnew)) > tol & iter < maxiter   iter = iter + 1;   x = xnew;   fnk = feval(fnctn,x,varargin{:});      % Set dx for derivation   for k = 1:nx      if x(k) ~= 0         dx(k) = x(k) / 100;      else         dx(k) = 1 / 100;      end   end      % Calculation of the Jacobian matrix   a = x;   b = x;   for k = 1 : nx      a(k) = a(k) - dx(k);  fa = feval(fnctn,a,varargin{:});      b(k) = b(k) + dx(k);  fb = feval(fnctn,b,varargin{:});      jacob(:,k) = (fb - fa) / (b(k) - a(k));      a(k) = a(k) + dx(k);      b(k) = b(k) - dx(k);   end      % Next approximation of the roots   if det(jacob) == 0      xnew = x + max([abs(dx), 1.1*tol]);   else      xnew = x - rho * inv(jacob) * fnk;   endendif iter >= maxiter   disp('Warning : Maximum iterations reached.')end