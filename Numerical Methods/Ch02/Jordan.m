function x = Jordan (A , c)%JORDAN Solves a set of linear algebraic equations by the %   Gauss-Jordan method.%%   JORDAN(A,C) finds unknowns of a set of linear algebraic%   equations. A is the matrix of coefficients and C is the %   vector of constants.%%   See also GAUSS, SEIDEL% (c) N. Mostoufi & A. Constantinides% January 1, 1999c = (c(:).')';    % Make sure it's a column vectorn = length(c);[nr nc] = size(A);% Check coefficient matrix and vector of constantsif nr ~= nc   error('Coefficient matrix is not square.')endif nr ~= n   error('Coefficient matrix and vector of constants do not have the same length.')end% Check if the coefficient matrix is singularif det(A) == 0   fprintf('\n Rank = %7.3g\n',rank(A))   error('The coefficient matrix is singular.')endunit = diag(ones( 1 , n));	% Unit matrixorder = [1 : n];				% Order of unknownsaug = [A c];					% Augmented matrix% Gauss - Jordan algorithmfor k = 1 : n   pivot = abs(aug(k , k));   prow = k;   pcol = k;      % Locating the maximum pivot element   for row = k : n      for col = k : n         if abs(aug(row , col)) > pivot            pivot = abs(aug(row , col));            prow = row;            pcol = col;         end      end   end      % Interchanging the rows   pr = unit;   tmp = pr(k , :);   pr(k , : ) = pr(prow , : );   pr(prow , : ) = tmp;   aug = pr * aug;      % Interchanging the columns   pc = unit;   tmp = pc(k , : );   pc(k , : ) = pc(pcol , : );   pc(pcol , : ) = tmp;   aug(1 : n , 1 : n) = aug(1 : n , 1 : n) * pc;   order = order * pc;	% Keep track of the column interchanges      % Reducing the elements above and below diagonal to zero   lk = unit;   for m = 1 : n      if m == k         lk(m , k) = 1 / aug(k , k);      else         lk(m , k) = - aug(m , k) / aug(k , k);      end   end   aug = lk * aug;endx = zeros(n , 1);% Solutionfor k = 1 : n    x(order(k)) = aug(k , n + 1);end